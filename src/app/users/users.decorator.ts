import { applyDecorators, UseInterceptors } from '@nestjs/common';
import { BadRequestDto, ForbiddenDto, UnauthorizedDto } from 'src/shared/dto';
import { FileInterceptor } from '@nestjs/platform-express';
import { imageFileFilter } from 'src/shared/utils/upload-util';
import { FamilyRoles } from 'src/shared/decorator/family-api.decorator';
import { FamilyRole } from '../families/families.enum';
import {
  ApiBadRequestResponse,
  ApiBearerAuth,
  ApiBody,
  ApiConsumes,
  ApiCreatedResponse,
  ApiForbiddenResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiPayloadTooLargeResponse,
  ApiUnauthorizedResponse,
  ApiUnprocessableEntityResponse,
} from '@nestjs/swagger';
import {
  CreateMemberDto,
  CreateMemberDtoFailureDto,
  MyFamilyGetResponseDto,
  ProfileAvatarDeleteResponseDto,
  ProfileAvatarPutDto,
  ProfileAvatarPutFailureDto,
  ProfileAvatarPutResponseDto,
  ProfileAvatarPutTooLargeDto,
  ProfileGetResponseDto,
  ProfilePutDto,
  ProfilePutResponseDto,
} from './dto';
import { FileSize } from '../../shared/module/upload/upload.enum';

export function ProfileGetDec() {
  return applyDecorators(
    ApiBearerAuth(),
    ApiOperation({
      summary: 'Get Profile Details',
      description: '',
    }),
    ApiOkResponse({
      type: ProfileGetResponseDto,
      description: 'Returns user info.',
    }),
    ApiUnauthorizedResponse({
      type: UnauthorizedDto,
      description: 'Unauthorized.',
    }),
    ApiBadRequestResponse({
      type: BadRequestDto,
      description: 'Bad request. Body properties are invalid.',
    }),
  );
}

export function ProfilePutDec() {
  return applyDecorators(
    ApiBearerAuth(),
    ApiBody({ type: ProfilePutDto }),
    ApiOperation({
      summary: 'Update User Profile',
      description: '',
    }),
    ApiOkResponse({
      type: ProfilePutResponseDto,
      description: 'Updates user info.',
    }),
    ApiUnauthorizedResponse({
      type: UnauthorizedDto,
      description: 'Unauthorized.',
    }),
    ApiBadRequestResponse({
      type: BadRequestDto,
      description: 'Bad request. Body properties are invalid.',
    }),
  );
}

export function ProfileAvatarPutDec() {
  return applyDecorators(
    ApiBearerAuth(),
    UseInterceptors(
      FileInterceptor('file', {
        limits: { fileSize: FileSize.OneMB },
        fileFilter: imageFileFilter,
      }),
    ),
    ApiConsumes('multipart/form-data'),
    ApiBody({ type: ProfileAvatarPutDto }),
    ApiOperation({
      summary: 'Update User Avatar',
      description: 'File size 1m and this formats (jpg|jpeg|png|gif) allowed',
    }),
    ApiOkResponse({
      type: ProfileAvatarPutResponseDto,
      description: 'Updates user avatar.',
    }),
    ApiUnauthorizedResponse({
      type: UnauthorizedDto,
      description: 'Unauthorized.',
    }),
    ApiBadRequestResponse({
      type: BadRequestDto,
      description: 'Bad request. Body properties are invalid.',
    }),
    ApiUnprocessableEntityResponse({
      type: ProfileAvatarPutFailureDto,
      description: 'Unprocessable request.',
    }),
    ApiPayloadTooLargeResponse({
      type: ProfileAvatarPutTooLargeDto,
      description: 'Payload Too Large.',
    }),
  );
}

export function ProfileAvatarDeleteDec() {
  return applyDecorators(
    ApiBearerAuth(),
    ApiOperation({
      summary: 'Delete User Avatar',
      description: '',
    }),
    ApiOkResponse({
      type: ProfileAvatarDeleteResponseDto,
      description: 'Deletes user avatar.',
    }),
    ApiUnauthorizedResponse({
      type: UnauthorizedDto,
      description: 'Unauthorized.',
    }),
    ApiBadRequestResponse({
      type: BadRequestDto,
      description: 'Bad request. Body properties are invalid.',
    }),
  );
}

export function UserPostDec() {
  return applyDecorators(
    ApiBearerAuth(),
    ApiBody({ type: CreateMemberDto }),
    ApiOperation({
      summary: 'Create User',
      description: ` In family section, you should use another api (POST families/user) in order to attach this user to the family.
      The password is going to be randomly generated by default. This behaviour can be changed in future. (e.g. add an option password field to the body)`,
    }),
    ApiCreatedResponse({
      type: ProfileGetResponseDto,
      description: `User created.`,
    }),
    ApiUnauthorizedResponse({
      type: UnauthorizedDto,
      description: 'Unauthorized.',
    }),
    ApiBadRequestResponse({
      type: BadRequestDto,
      description: 'Bad request. Body properties are invalid.',
    }),
    ApiUnprocessableEntityResponse({
      type: CreateMemberDtoFailureDto,
      description: 'Unprocessable request.',
    }),
  );
}

export function MyFamilyGet() {
  return applyDecorators(
    ApiBearerAuth(),
    FamilyRoles(FamilyRole.User),
    ApiParam({ name: 'familyId', description: 'id of family' }),
    ApiOperation({
      summary: 'Get list of my family users',
      description: '',
    }),
    ApiOkResponse({
      type: [MyFamilyGetResponseDto],
      description: 'Get list of my family users.',
    }),
    ApiForbiddenResponse({
      type: ForbiddenDto,
      description: 'Forbidden.',
    }),
    ApiUnauthorizedResponse({
      type: UnauthorizedDto,
      description: 'Unauthorized.',
    }),
    ApiBadRequestResponse({
      type: BadRequestDto,
      description: 'Bad request. Properties are invalid.',
    }),
  );
}
